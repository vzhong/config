" load vundle
set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle
Bundle 'gmarik/vundle'

filetype plugin indent on
syntax on

" Copy paste
set clipboard+=unnamed

" My Bundles
Bundle 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
Bundle 'tpope/vim-sensible'
Bundle 'tpope/vim-fugitive'
Bundle 'powerline/powerline'
Bundle 'scrooloose/syntastic'
Bundle 'kien/ctrlp.vim'
Bundle 'slim-template/vim-slim'
Bundle 'Valloric/YouCompleteMe'
Bundle 'scrooloose/nerdtree'
Bundle 'Xuyuanp/nerdtree-git-plugin'
Bundle 'klen/python-mode'
Bundle 'tpope/vim-dispatch'
Bundle 'xolox/vim-misc'
Bundle 'vzhong/vim-lua-ftplugin'

colorscheme Tomorrow-Night

" My settings
set cursorline
set expandtab
set modelines=0
set shiftwidth=2
set clipboard=unnamed
set synmaxcol=128
set ttyscroll=10
set encoding=utf-8
set tabstop=2
set nowrap
set number
set expandtab
set nowritebackup
set noswapfile
set nobackup
set hlsearch
set ignorecase
set smartcase

" Leader key
let mapleader = "\<Space>"


" Open nerdtree by default
" autocmd vimenter * NERDTree
" Close if only nerdtree left
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" Map nerdtree hotkey to leader f
nmap <leader>f :NERDTreeToggle<cr>

" reload changes
set autoread

" wrap lines
set wrap
" navigate line wraps
onoremap <silent> j gj
onoremap <silent> k gk

" ctrl to change panes
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" split right and bottom
set splitbelow
set splitright

" tab nagivation
nnoremap <leader>n = gt
nnoremap <leader>p = gT

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

" YouCompleteMe
" go to definition
nnoremap <leader>jd :YcmCompleter GoTo<CR>
let g:ycm_goto_buffer_command = 'vertical-split'
" seed with syntax files
let g:ycm_seed_identifiers_with_syntax = 1
" add function information
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_key_list_select_completion = ['<TAB>', '<Down>', '<ENTER>']

" Python mode
let g:syntastic_ignore_files = ['\.py$'] " disable syntastic linting
let g:pymode_lint = 1
let g:pymode_lint_message = 1
let g:pymode_lint_ignore = "E402,E501,E302,E111,E114"
let g:pymode_lint_on_write = 1
let g:pymode_options_colorcolumn = 0
let g:pymode_rope_complete_on_dot = 0
let g:pymode_doc_bind = 'K'
let g:pymode_folding = 0

" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" Compilation
autocmd FileType java let b:dispatch = 'javac %'
autocmd FileType lua let b:dispatch = 'th %'
nnoremap <leader>r :Dispatch<CR>

" Lua
let g:lua_complete_omni = 0
let g:lua_complete_globals = 0
let g:lua_complete_dynamic = 0
let g:lua_compiler_name = 'luajit'
let g:lua_compiler_args = '-bl'

let g:syntastic_check_on_open = 1
let g:syntastic_lua_checkers = ["luacheck"]
let g:syntastic_lua_luacheck_args = "--no-unused-args"
